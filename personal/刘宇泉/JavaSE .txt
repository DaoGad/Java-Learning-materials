<<<<<<< HEAD
JavaSE
	Java面向对象三大特征：
		多态：提高可拓展性---抽象类abstract，
		封装：实现安全性---私有属性，公开属性 get/set
		继承：重用性---子类调用父类资源除了private，super调用父类的构造函数不能重写

		override方法重写：---在不同类去实现
			前提：继承关系--父子类
			原则：
				方法名相同、方法参数相同（个数，类型）返回值类型相同、子类的访问修饰符不能严于父类
		overload方法重载：---在同一类实现
			方法名相同、方法参数不相同(个数或类型)、跟方法返回值类型、访问修饰符没有关系

	面向接口编程---interface 接口继承接口，接口不能继承类

	Java异常
		try：存放可能会出现异常的代码
		catch：捕获try的异常
		finally：不论有无异常都会执行	不执行finally System.exit(0)
		throw：手动抛出异常
		throws：声明异常-调用者处理

		检查异常，运行时异常
	 
		return：1、方法有返回值时用return是返回，没有返回值时用return是跳出

	Java集合框架：
		List:存放一组有序但不是唯一的值
		Set:存放一组无序但是唯一的值、实现类HashSet
		Map:通过key，value存储
		Conllections:存放一组无序，不唯一的值

		ArrayList:内存中连续的空间分布--查询效率较高
		linkedList:在内存中通过链表式的方式储存--执行删除、新增效率较高
		hashMap:非线程安全，执行效率高
		hashTable:线程安全，执行效率低
		线程状态：创建[new]，就绪[start]，运行[run()]，堵塞[sleep(),wait()，join(),yield()]，死亡[]

	JDBC:
		1、加载驱动 DriveManager
		2、建立连接 conection
		3、执行SQL statement
		4、处理结果 ResultSet
		5、释放资源 .close()
		Statement: --->perperdStatement子类
			ExecuteQuery()---返回ResultSet对象--处理查询sql
			ExecuteUpdate()--返回受影响行数--int--处理增、删、改、查
			Execute() --- 返回的是boolean--如果sql执行的是查询操作、返回true、否则返回false
			Statement:--->perperdStatement区别
			perperdStatement
				sql语句使用占位符?(防止sql注入攻击)
				预编译的过程(执行效率高、性能好)
		Dao模式：entity、dao、daoimpl、工具类baseDao
		分层
			Dao:--数据访问层、操作sql语句
			Service:--业务逻辑层、负责打开、关闭数据库、业务相关处理
			UI:--展示数据--提供给用户查看
		分层原则:
			上层(dao)不能调用下层(service)
			不能跨层访问
			上层(dao)为下层(service)服务
			下层(service)依赖上层(dao)
	业务功能实现：--分页
		1、编写分页工具类(当前页码、总记录数、页面大小、总页数、每页显示的数据-集合)
		2、编写sql语句--获取总记录数
		3、编写分页的sql语句 limit 4,4(第一个参数代表起始位置、第二个参数代表页面的大小)
			1)、总共20条数据，每页显示5条--总共4页
			2)、显示第一页	limit 0,5	当前页码减一乘于页面大小 (1-1)*5
			3)、显示第二页 limit 5,5
			4)、显示第三页 limit 10,5
			5)、显示第四页 limit 15,5
		4、控制前端页面的显示
	  文件上传
	  	1、添加文件上传的jar包
	  	2、编写表单页面、文件上传提交的方式使用post，设置表单属性enctype的属性值
	  	3、判断文件的类型是否multpart类型
	  	4、获取服务器的路径-用来储存上传文件地址
	  	5、编码

	JSP--
		JSP和servlet关系
		JSP翻译之后的Java文件就是servlet
		servlet就是一个Java类、但是需要继承HTTP Servlet处理请求，相应页面数据
	  内置对象:
	  	Request--请求
	  		处理转发
	  			Request.getRequestDispacher().forword(request,response)
	  			当页面请求方式为post时，通过request.setCharEncoding("")
	  	Response--响应请求
	  		处理页面重定向
	  			Response.sendRedirect("")
	  	Session--一个会话
	  		Cookie和Session区别
	  			Session数据保存在服务器、安全性比较高、通过Object保存数据
	  			Cookie数保存在客户端，安全性比较低、通过String保存数据
	  	Application--全局
	  	Out--输出

	  	JSP作用域
	  		Page
	  		Request
	  		Session
	  		Application
	  Servlet生命周期：创建(由servlet容器创建)、init初始化，service服务(执行doget、dopost) destory销毁


	&和&&的区别
		1、&&会出现短路，如果可以通过第一个表达式判断出整个表达式的结果，则不继续后面表达式的运算，只能操作boolean类型数据
		2、&不会出现短路，将整个表达式都运算，即可以操作boolean数据还可以操作数
	数据类型
		基本数据类型(4类8种)
			1、证书类型：byte、short、int、long
			2、浮点数类型：float、double
			3、字符类型：char
			4、布尔类型：boolean(true,false)
		引用数据类型
			1、类
			2、接口
			3、数组
		类型转换
			精度从低到高:byte,short(char),int,long,float,double
			1、自动类型转换将一个低精度---->高精度
			2、强制类型转换将一个高精度---->低精度(精度会下降)
	函数
		1、定义
			函数就是定义在类中的具有特定功能的一段独立小程序
		2、特点
			1)、定义函数可以将功能代码进行封装
			2)、便于对该功能进行服用
			3)、函数只有被调用才会被执行
			4)、函数的出现提高了代码的复用性
			5)、对于函数没有具体返回值的情况，返回值类型用关键字void表示，那么该函数中的return语句如果在最后一行可以省略不写
		3、函数的应用两个明确
			1)、明确要定义的功能最后的结果是什么
			2)、明确在定义该功能的过程中，是否需要未知内容参与运算
	内存结构
		1、栈内存：用于存储局部变量，当数据适用完
		2、堆内存：数组和对象，通过new建立的实例都存放在堆内存中
		3、方法区：静态成员，构造函数，常量池，线程池
		4、本地方法区：window系统占用
		5、寄存器
	成员变量和局部变量的区别
		1、作用域
			成员变量：针对整个类有效
			局部变量：只在某个范围有效(一般指的就是方法，语句体内)
		2、存储位置
			成员变量：随着对象的创建存在，随着对象消失而消失，存储在堆内存中
			局部变量：在方法被调用，或者语句被执行的时候存在，存储在栈内存中，当方法调用完，或者语句结束后，就自动释放
		3、初始值
			成员变量：有默认初始值
			局部变量：没有默认初始值，使用前必须赋值
	构造代码块
		1、构造代码块作用
			给对象进行初始化，对象一建立就执行，而且优先于构造函数执行
		2、构造代码块和构造函数的区别
			构造代码块是给所有不同对象的共性进行统一初始化
			构造函数是给对应的归降进行初始化
	this关键字
		1、this关键字代表本类对象的一个引用，谁调用this所在的方法，this就代表谁
		2、this的使用场景
			用于区分同名成员变量和局部变量
			在定义函数时：该函数内部要用到调用该函数的对象时，因为此时对象还没建立故this代表此对象
			构造函数间调用：这个时候，this(参数)必须作为第一条语句存在
	static关键字
		静态的特点
			随着类的加载而加载
				优先于对象存在
				对所有对象共享
				可以被类型直接调用
		静态的注意事项
			在静态方法中不能使用this，super关键字
			由于jvm调用main方法的时候，没有创建对象，只能通过类名调用，所以main必须用static修饰
			main方法是被jvm调用，不需要返回值，用void修饰
		静态变量和成员变量的区别
			调用方式
				静态变量也称为类变量，可以直接通过类名调用，也可以通过对象名调用这个变量属于类
				成员变量也称为实例变量，只能通过对象名调用，这个变量属于对象
			存储位置
				静态变量存储在方法区长中的静态区
				成员变量存储在堆内存
			声明周期
				静态变量随着类的加载而存在，随着类的消失而消失，生命周期长
				成员变量随着对象的创建而存在，随着对象的消失而消失
			与对象的相关性
				静态变量是所有对象共享的数据
				成员变量是每个对象所特有的数据
			静态的有点和弊端
				优点	
					对对象的共享数据进行单独空间的存储，节省内存，没有必要每个对象都存储一份可直接被类名调用
				弊端
					生命周期过长，随着类的消失而消失
					访问出现权限，即静态虽好但只能访问静态
			什么时候使用静态呢
				当所有对象共享某个数据的时候，就把这个成员变量定义为静态修饰的
				当某个方法没有访问该类中的非静态成员，就可以把这个方法定义为静态修饰，静态的生命周期比较长吗，所以一般不推荐使用
			静态代码块
				它只执行一次，它比mian还先执行
				执行顺序：静态代码块--构造代码块--构造方法
			
		单例设计模式
			1、设计模式
				结局某类问题行之有效的方法，是一种思想，是规律的总结
			2、用来保证某个类在内存中只有一个对象
			3、保证唯一性的思想及步骤
				1)、为避免其他程序建立该类对象，先禁止其他程序建立该类对象，即将构造函数私有化
				2)、为了其他程序访问到该类对象，须在本类中创建一个该类私有对象
				3)、为了方便其他程序访问到该类对象，可对外提供一个公共访问方式
				4)、单例设计模式的两种方式
					饿汉模式当类加载的时候，就创建对象
					懒汉模式当使用的时候，才去创建对象
				5)、饿汉模式和懒汉模式的区别
					a、饿汉模式是类一加载进内存就创建好了对象
					b、懒汉模式则是类才加载进内存的时候，对象还没有存在，调用getinstance方法时，对象才开始创建
					c、懒汉模式是延迟加载，如果多各线程同时操作懒汉模式时就有可能出现线程安全问题
					解决线程安全问题:可以加同步来解决，但是加了同步之后，每一次都要比较锁，效率就变慢了，所有可以加双重判断来提高程序效率
					备注：开发常用饿汉模式，因为饿汉模式简单安全，懒汉模式多线程的时候容易出问题
		Math类的使用
			1、数学操作类：该类没有构造函数，方法均为静态
			2、掌握内容
				1)、成员变量
					E：比任何其他值都更接近e,(即自然对数的底数)的double值
					PI：比任何其他值都更接近pi(即圆的周长与直径之比)的double值
				2)、成员方法
					static double abs(double a)：返回 double 值的绝对值。返回绝对值
					static double ceil(double a)：返回最小的（最接近负无穷大）double 值，该值大于等于参数，并等于某个整数
					static double floor(double a)：返回最大的（最接近正无穷大）double 值，该值小于等于参数，并等于某个整数
					max：返回两个值中较大的那个
					min：返回两个值中较小的那个
					static long round(double a)：返回最接近参数的 long
					static int round(float a)：返回最接近参数的 int
					static double random()：返回带正号的 double 值，该值大于等于 0.0 且小于 1.0
					static double pow(double a, double b)：返回第一个参数的第二个参数次幂的值
					static double sqrt(double a)：返回正确舍入的 double 值的正平方根
		Random类的使用
			1、产生随机数的类
			2、掌握内容
			1)构造方法
			Random()：创建一个新的随机数生成器。
			Random(long seed)：使用单个 long 种子创建一个新的随机数生成器。
			2)成员方法
			int nextInt()：返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值
=======
JavaSE
	Java面向对象三大特征：
		多态：提高可拓展性---抽象类abstract，
		封装：实现安全性---私有属性，公开属性 get/set
		继承：重用性---子类调用父类资源除了private，super调用父类的构造函数不能重写

		override方法重写：---在不同类去实现
			前提：继承关系--父子类
			原则：
				方法名相同、方法参数相同（个数，类型）返回值类型相同、子类的访问修饰符不能严于父类
		overload方法重载：---在同一类实现
			方法名相同、方法参数不相同(个数或类型)、跟方法返回值类型、访问修饰符没有关系

	面向接口编程---interface 接口继承接口，接口不能继承类

	Java异常
		try：存放可能会出现异常的代码
		catch：捕获try的异常
		finally：不论有无异常都会执行	不执行finally System.exit(0)
		throw：手动抛出异常
		throws：声明异常-调用者处理

		检查异常，运行时异常
	 
		return：1、方法有返回值时用return是返回，没有返回值时用return是跳出

	Java集合框架：
		List:存放一组有序但不是唯一的值
		Set:存放一组无序但是唯一的值、实现类HashSet
		Map:通过key，value存储
		Conllections:存放一组无序，不唯一的值

		ArrayList:内存中连续的空间分布--查询效率较高
		linkedList:在内存中通过链表式的方式储存--执行删除、新增效率较高
		hashMap:非线程安全，执行效率高
		hashTable:线程安全，执行效率低
		线程状态：创建[new]，就绪[start]，运行[run()]，堵塞[sleep(),wait()，join(),yield()]，死亡[]

	JDBC:
		1、加载驱动 DriveManager
		2、建立连接 conection
		3、执行SQL statement
		4、处理结果 ResultSet
		5、释放资源 .close()
		Statement: --->perperdStatement子类
			ExecuteQuery()---返回ResultSet对象--处理查询sql
			ExecuteUpdate()--返回受影响行数--int--处理增、删、改、查
			Execute() --- 返回的是boolean--如果sql执行的是查询操作、返回true、否则返回false
			Statement:--->perperdStatement区别
			perperdStatement
				sql语句使用占位符?(防止sql注入攻击)
				预编译的过程(执行效率高、性能好)
		Dao模式：entity、dao、daoimpl、工具类baseDao
		分层
			Dao:--数据访问层、操作sql语句
			Service:--业务逻辑层、负责打开、关闭数据库、业务相关处理
			UI:--展示数据--提供给用户查看
		分层原则:
			上层(dao)不能调用下层(service)
			不能跨层访问
			上层(dao)为下层(service)服务
			下层(service)依赖上层(dao)
	业务功能实现：--分页
		1、编写分页工具类(当前页码、总记录数、页面大小、总页数、每页显示的数据-集合)
		2、编写sql语句--获取总记录数
		3、编写分页的sql语句 limit 4,4(第一个参数代表起始位置、第二个参数代表页面的大小)
			1)、总共20条数据，每页显示5条--总共4页
			2)、显示第一页	limit 0,5	当前页码减一乘于页面大小 (1-1)*5
			3)、显示第二页 limit 5,5
			4)、显示第三页 limit 10,5
			5)、显示第四页 limit 15,5
		4、控制前端页面的显示
	  文件上传
	  	1、添加文件上传的jar包
	  	2、编写表单页面、文件上传提交的方式使用post，设置表单属性enctype的属性值
	  	3、判断文件的类型是否multpart类型
	  	4、获取服务器的路径-用来储存上传文件地址
	  	5、编码

	JSP--
		JSP和servlet关系
		JSP翻译之后的Java文件就是servlet
		servlet就是一个Java类、但是需要继承HTTP Servlet处理请求，相应页面数据
	  内置对象:
	  	Request--请求
	  		处理转发
	  			Request.getRequestDispacher().forword(request,response)
	  			当页面请求方式为post时，通过request.setCharEncoding("")
	  	Response--响应请求
	  		处理页面重定向
	  			Response.sendRedirect("")
	  	Session--一个会话
	  		Cookie和Session区别
	  			Session数据保存在服务器、安全性比较高、通过Object保存数据
	  			Cookie数保存在客户端，安全性比较低、通过String保存数据
	  	Application--全局
	  	Out--输出

	  	JSP作用域
	  		Page
	  		Request
	  		Session
	  		Application
	  Servlet生命周期：创建(由servlet容器创建)、init初始化，service服务(执行doget、dopost) destory销毁


	&和&&的区别
		1、&&会出现短路，如果可以通过第一个表达式判断出整个表达式的结果，则不继续后面表达式的运算，只能操作boolean类型数据
		2、&不会出现短路，将整个表达式都运算，即可以操作boolean数据还可以操作数
	数据类型
		基本数据类型(4类8种)
			1、证书类型：byte、short、int、long
			2、浮点数类型：float、double
			3、字符类型：char
			4、布尔类型：boolean(true,false)
		引用数据类型
			1、类
			2、接口
			3、数组
		类型转换
			精度从低到高:byte,short(char),int,long,float,double
			1、自动类型转换将一个低精度---->高精度
			2、强制类型转换将一个高精度---->低精度(精度会下降)
	函数
		1、定义
			函数就是定义在类中的具有特定功能的一段独立小程序
		2、特点
			1)、定义函数可以将功能代码进行封装
			2)、便于对该功能进行服用
			3)、函数只有被调用才会被执行
			4)、函数的出现提高了代码的复用性
			5)、对于函数没有具体返回值的情况，返回值类型用关键字void表示，那么该函数中的return语句如果在最后一行可以省略不写
		3、函数的应用两个明确
			1)、明确要定义的功能最后的结果是什么
			2)、明确在定义该功能的过程中，是否需要未知内容参与运算
	内存结构
		1、栈内存：用于存储局部变量，当数据适用完
		2、堆内存：数组和对象，通过new建立的实例都存放在堆内存中
		3、方法区：静态成员，构造函数，常量池，线程池
		4、本地方法区：window系统占用
		5、寄存器
	成员变量和局部变量的区别
		1、作用域
			成员变量：针对整个类有效
			局部变量：只在某个范围有效(一般指的就是方法，语句体内)
		2、存储位置
			成员变量：随着对象的创建存在，随着对象消失而消失，存储在堆内存中
			局部变量：在方法被调用，或者语句被执行的时候存在，存储在栈内存中，当方法调用完，或者语句结束后，就自动释放
		3、初始值
			成员变量：有默认初始值
			局部变量：没有默认初始值，使用前必须赋值
	构造代码块
		1、构造代码块作用
			给对象进行初始化，对象一建立就执行，而且优先于构造函数执行
		2、构造代码块和构造函数的区别
			构造代码块是给所有不同对象的共性进行统一初始化
			构造函数是给对应的归降进行初始化
	this关键字
		1、this关键字代表本类对象的一个引用，谁调用this所在的方法，this就代表谁
		2、this的使用场景
			用于区分同名成员变量和局部变量
			在定义函数时：该函数内部要用到调用该函数的对象时，因为此时对象还没建立故this代表此对象
			构造函数间调用：这个时候，this(参数)必须作为第一条语句存在
	static关键字
		静态的特点
			随着类的加载而加载
				优先于对象存在
				对所有对象共享
				可以被类型直接调用
		静态的注意事项
			在静态方法中不能使用this，super关键字
			由于jvm调用main方法的时候，没有创建对象，只能通过类名调用，所以main必须用static修饰
			main方法是被jvm调用，不需要返回值，用void修饰
		静态变量和成员变量的区别
			调用方式
				静态变量也称为类变量，可以直接通过类名调用，也可以通过对象名调用这个变量属于类
				成员变量也称为实例变量，只能通过对象名调用，这个变量属于对象
			存储位置
				静态变量存储在方法区长中的静态区
				成员变量存储在堆内存
			声明周期
				静态变量随着类的加载而存在，随着类的消失而消失，生命周期长
				成员变量随着对象的创建而存在，随着对象的消失而消失
			与对象的相关性
				静态变量是所有对象共享的数据
				成员变量是每个对象所特有的数据
			静态的有点和弊端
				优点	
					对对象的共享数据进行单独空间的存储，节省内存，没有必要每个对象都存储一份可直接被类名调用
				弊端
					生命周期过长，随着类的消失而消失
					访问出现权限，即静态虽好但只能访问静态
			什么时候使用静态呢
				当所有对象共享某个数据的时候，就把这个成员变量定义为静态修饰的
				当某个方法没有访问该类中的非静态成员，就可以把这个方法定义为静态修饰，静态的生命周期比较长吗，所以一般不推荐使用
			静态代码块
				它只执行一次，它比mian还先执行
				执行顺序：静态代码块--构造代码块--构造方法
			
		单例设计模式
			1、设计模式
				结局某类问题行之有效的方法，是一种思想，是规律的总结
			2、用来保证某个类在内存中只有一个对象
			3、保证唯一性的思想及步骤
				1)、为避免其他程序建立该类对象，先禁止其他程序建立该类对象，即将构造函数私有化
				2)、为了其他程序访问到该类对象，须在本类中创建一个该类私有对象
				3)、为了方便其他程序访问到该类对象，可对外提供一个公共访问方式
				4)、单例设计模式的两种方式
					饿汉模式当类加载的时候，就创建对象
					懒汉模式当使用的时候，才去创建对象
				5)、饿汉模式和懒汉模式的区别
					a、饿汉模式是类一加载进内存就创建好了对象
					b、懒汉模式则是类才加载进内存的时候，对象还没有存在，调用getinstance方法时，对象才开始创建
					c、懒汉模式是延迟加载，如果多各线程同时操作懒汉模式时就有可能出现线程安全问题
					解决线程安全问题:可以加同步来解决，但是加了同步之后，每一次都要比较锁，效率就变慢了，所有可以加双重判断来提高程序效率
					备注：开发常用饿汉模式，因为饿汉模式简单安全，懒汉模式多线程的时候容易出问题
		Math类的使用
			1、数学操作类：该类没有构造函数，方法均为静态
			2、掌握内容
				1)、成员变量
					E：比任何其他值都更接近e,(即自然对数的底数)的double值
					PI：比任何其他值都更接近pi(即圆的周长与直径之比)的double值
				2)、成员方法
					static double abs(double a)：返回 double 值的绝对值。返回绝对值
					static double ceil(double a)：返回最小的（最接近负无穷大）double 值，该值大于等于参数，并等于某个整数
					static double floor(double a)：返回最大的（最接近正无穷大）double 值，该值小于等于参数，并等于某个整数
					max：返回两个值中较大的那个
					min：返回两个值中较小的那个
					static long round(double a)：返回最接近参数的 long
					static int round(float a)：返回最接近参数的 int
					static double random()：返回带正号的 double 值，该值大于等于 0.0 且小于 1.0
					static double pow(double a, double b)：返回第一个参数的第二个参数次幂的值
					static double sqrt(double a)：返回正确舍入的 double 值的正平方根
		Random类的使用
			1、产生随机数的类
			2、掌握内容
			1)构造方法
			Random()：创建一个新的随机数生成器。
			Random(long seed)：使用单个 long 种子创建一个新的随机数生成器。
			2)成员方法
			int nextInt()：返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值
>>>>>>> 11b9498acbb674de9f78bfef065d73a1323fcaf0
			int nextInt(int n)：返回一个伪随机数，它是取自此随机数生成器序列的、在 0（包括）和指定值（不包括）之间均匀分布的 int 值